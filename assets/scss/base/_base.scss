// Container widths
$grid-gutter-width: 30px !default;
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px
) !default;
$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px
) !default;
@mixin make-container() {
    position: relative;
    width: 100%;
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);
    margin-right: auto;
    margin-left: auto;
}




@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

$enable-grid-classes: true !default;

//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
    .container {
        @include make-container();
        @include make-container-max-widths();
    }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but with 100% width for
// fluid, full width layouts.

@if $enable-grid-classes {
    .container-fluid {
        @include make-container();
    }
}

*, ::after, ::before {
    box-sizing: border-box;
}

//==============Style common===============//
$pricolor: rgb(255, 186, 0);
$linkcolor:rgb(56, 105, 159);
$btncolor:#fc9807;
@mixin fontbtn{
    color: white;
    font-size: 15px;
    font-family: Helvetica, Arial,sans-serif;
    font-weight: 700;
}
@mixin fontnav{
    font-weight: normal;
    font-size: 15px;
    font-family: Helvetica,Arial,sans-serif;
}
@mixin fontcategory{
    font-size: 18px;
    font-weight: normal;
    font-style: normal;
    color: rgb(34, 34, 34);
    line-height: 1.33;
    font-family: Helvetica,Arial,sans-serif;
}
@mixin fontheading{
    font-size: 17px;
    line-height: 1.41;
    font-weight: bold;
    letter-spacing: normal;
    color: rgb(34, 34, 34);
}
@mixin xemthem{
    cursor: pointer;
    outline: none;
    background: none;
    border: none;
    display: block;
    width: 100%;
    color:  #38699f;
    font-size: 16px;
    font-weight: bold;
    font-stretch: normal;
    font-style: normal;
    line-height: 20px;
    text-align: center;
    padding: 12px;
}



* {
    margin: 0;
    padding: 0;
}
html {
    height: 100%;
    box-sizing: border-box;
}

body {
    background-color: #F4F4F4;
    font-family: Roboto, Helvetica Neue, Helvetica, Arial, sans-serif;
    font-size: 14px;
    font-weight: 400;
    line-height: 1.5;
    position: relative;
    margin: 0;
    padding: 0;
    min-height: 100%;
}

.container {
    padding: 0 10px;
}

b, strong {
    font-weight: 500;
}
a {
    color: #2d2d2d;
    text-decoration: none;
}
::placeholder {
    font-family: Roboto, Helvetica Neue, Helvetica, Arial, sans-serif;
}
ul li {
    list-style: none;
}
.no-scroll {
    overflow-y: hidden;
}
img.image {
    height: 100%;
    width: 100%;
    object-fit: contain;
}
.limit-line {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: var(--line)
}
*::-webkit-scrollbar {
    width: 5px;
}

*::-webkit-scrollbar-thumb {
    border-radius: 5px;
    background-color: #E5E5E5;
}
